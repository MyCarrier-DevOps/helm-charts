{{- if gt (int .Values.server.workers) 0 }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "trino.worker" . }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app: {{ template "trino.name" . }}
    chart: {{ template "trino.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: worker
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" (dict "value" .Values.commonLabels "context" $) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" (dict "value" .Values.commonAnnotations "context" $) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.server.workers }}
  selector:
    matchLabels:
      app: {{ template "trino.name" . }}
      release: {{ .Release.Name }}
      component: worker
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app: {{ template "trino.name" . }}
        release: {{ .Release.Name }}
        component: worker
        {{- if .Values.commonLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.commonLabels "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.worker.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.worker.podLabels "context" $) | nindent 8 }}
        {{- end }}
      annotations:
        checksum/catalog: {{ include (print $.Template.BasePath "/catalog.yaml") . | sha256sum }}
        {{- if .Values.worker.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.worker.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "trino.serviceAccountName" . }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "trino.worker" . }}
        - name: catalog-volume
        {{- if and (not .Values.catalogs.secret.generate) (empty .Values.catalogs.secret.existingSecret) (or .Values.catalogs.configMap.generate .Values.catalogs.configMap.existingConfigmap) }}
          configMap:
            name: {{ if empty .Values.catalogs.configMap.existingConfigmap }}{{ template "trino.catalog" . }}{{ else }}{{ .Values.catalogs.configMap.existingConfigmap }}{{ end }}
        {{- end }}
        {{- if or .Values.catalogs.secret.generate (not (empty .Values.catalogs.secret.existingSecret)) }}
          secret:
            secretName: {{ if empty .Values.catalogs.secret.existingSecret }}{{ template "trino.catalog" . }}{{ else }}{{ .Values.catalogs.secret.existingSecret }}{{ end }}
        {{- end }}
        - name: schemas-volume
          configMap:
            name: schemas-volume-worker
      {{- if .Values.initContainers.worker }}
      initContainers:
      {{-  tpl (toYaml .Values.initContainers.worker) . | nindent 6 }}
      {{- end }}
        {{- range .Values.secretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
        {{- end }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}-worker
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- toYaml .Values.env | nindent 12 }}
          volumeMounts:
            - mountPath: {{ .Values.server.config.path }}
              name: config-volume
            - mountPath: {{ .Values.server.config.path }}/catalog
              name: catalog-volume
            - mountPath: {{ .Values.kafka.mountPath }}
              name: schemas-volume
            {{- range .Values.secretMounts }}
            - name: {{ .name }}
              mountPath: {{ .path }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
            initialDelaySeconds: {{ .Values.worker.livenessProbe.initialDelaySeconds | default 20 }}
            periodSeconds: {{ .Values.worker.livenessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.worker.livenessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.worker.livenessProbe.failureThreshold | default 6 }}
            successThreshold: {{ .Values.worker.livenessProbe.successThreshold | default 1 }}
          readinessProbe:
            httpGet:
              path: /v1/info
              port: http
            initialDelaySeconds: {{ .Values.worker.readinessProbe.initialDelaySeconds | default 20 }}
            periodSeconds: {{ .Values.worker.readinessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.worker.readinessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.worker.readinessProbe.failureThreshold | default 6 }}
            successThreshold: {{ .Values.worker.readinessProbe.successThreshold | default 1 }}
          resources:
            {{- toYaml .Values.worker.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
