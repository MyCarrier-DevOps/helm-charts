suite: CronJob template tests
templates:
  - cronjob.yaml
values:
  - ../values.yaml
tests:
  - it: should create a basic cronjob with required fields
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: metadata.name
          value: dev-app-backup-job
      - equal:
          path: spec.schedule
          value: "0 2 * * *"
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].image
          value: "myregistry.example.com/mycarrier/backup:1.0.0"
      - equal:
          path: spec.successfulJobsHistoryLimit
          value: 3
      - equal:
          path: spec.failedJobsHistoryLimit
          value: 1

  - it: should set timezone when specified
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          timeZone: "America/New_York"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: spec.timeZone
          value: "America/New_York"

  - it: should set concurrency policy when specified
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          concurrencyPolicy: "Replace"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: spec.concurrencyPolicy
          value: "Replace"

  - it: should suspend cronjob when specified
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          suspend: true
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: spec.suspend
          value: true

  - it: should set custom history limits
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          successfulJobsHistoryLimit: 5
          failedJobsHistoryLimit: 3
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: spec.successfulJobsHistoryLimit
          value: 5
      - equal:
          path: spec.failedJobsHistoryLimit
          value: 3

  - it: should set starting deadline seconds when specified
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          startingDeadlineSeconds: 200
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: spec.startingDeadlineSeconds
          value: 200

  - it: should include custom labels
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          labels:
            custom-label: "test-value"
            team: "platform"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: metadata.labels.custom-label
          value: "test-value"
      - equal:
          path: metadata.labels.team
          value: "platform"

  - it: should include custom annotations
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          annotations:
            app.mycarrier.tech/team: "platform"
            custom-annotation: "test-value"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: metadata.annotations["app.mycarrier.tech/team"]
          value: "platform"
      - equal:
          path: metadata.annotations.custom-annotation
          value: "test-value"
      - equal:
          path: metadata.annotations["argocd.argoproj.io/sync-options"]
          value: "Prune=true"

  - it: should set job deadline and backoff limit
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          activeDeadlineSeconds: 600
          backoffLimit: 3
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: spec.jobTemplate.spec.activeDeadlineSeconds
          value: 600
      - equal:
          path: spec.jobTemplate.spec.backoffLimit
          value: 3

  - it: should set restart policy
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          restartPolicy: "OnFailure"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: spec.jobTemplate.spec.template.spec.restartPolicy
          value: "OnFailure"

  - it: should set image pull policy
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          imagePullPolicy: "Always"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].imagePullPolicy
          value: "Always"

  - it: should set command and args
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          command: ["/bin/sh -c"]
          args: ["./run-backup.sh"]
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].command[0]
          value: "/bin/sh -c"
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].args[0]
          value: "./run-backup.sh"

  - it: should set environment variables
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          env:
            BACKUP_PATH: "/backups"
            LOG_LEVEL: "info"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: BACKUP_PATH
            value: "/backups"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: LOG_LEVEL
            value: "info"

  - it: should set environment variables from secret using secretKeyRef
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          env:
            S3_ACCESS_KEY:
              secretKeyRef:
                name: "s3-credentials"
                key: "access-key"
            S3_SECRET_KEY:
              secretKeyRef:
                name: "s3-credentials"
                key: "secret-key"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: S3_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: "s3-credentials"
                key: "access-key"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: S3_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: "s3-credentials"
                key: "secret-key"

  - it: should set environment variables from configMap using configMapKeyRef
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          env:
            BACKUP_CONFIG:
              configMapKeyRef:
                name: "backup-config"
                key: "settings.json"
            RETENTION_POLICY:
              configMapKeyRef:
                name: "backup-config"
                key: "retention"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: BACKUP_CONFIG
            valueFrom:
              configMapKeyRef:
                name: "backup-config"
                key: "settings.json"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: RETENTION_POLICY
            valueFrom:
              configMapKeyRef:
                name: "backup-config"
                key: "retention"

  - it: should set environment variables from field references
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          env:
            POD_NAME:
              fieldRef:
                fieldPath: "metadata.name"
            POD_NAMESPACE:
              fieldRef:
                fieldPath: "metadata.namespace"
            POD_IP:
              fieldRef:
                fieldPath: "status.podIP"
            NODE_NAME:
              fieldRef:
                fieldPath: "spec.nodeName"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: "metadata.name"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: "metadata.namespace"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: "status.podIP"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: "spec.nodeName"

  - it: should set environment variables from resource field references
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          env:
            MEMORY_LIMIT:
              resourceFieldRef:
                containerName: "backup-job"
                resource: "limits.memory"
            CPU_REQUEST:
              resourceFieldRef:
                containerName: "backup-job"
                resource: "requests.cpu"
            MEMORY_REQUEST:
              resourceFieldRef:
                containerName: "backup-job"
                resource: "requests.memory"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: MEMORY_LIMIT
            valueFrom:
              resourceFieldRef:
                containerName: "backup-job"
                resource: "limits.memory"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: CPU_REQUEST
            valueFrom:
              resourceFieldRef:
                containerName: "backup-job"
                resource: "requests.cpu"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: MEMORY_REQUEST
            valueFrom:
              resourceFieldRef:
                containerName: "backup-job"
                resource: "requests.memory"

  - it: should support mixed environment variable types
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          env:
            PLAIN_VALUE: "simple-string"
            NUMERIC_VALUE: "12345"
            BACKUP_BUCKET: "s3://my-backups"
            S3_SECRET_KEY:
              secretKeyRef:
                name: "s3-credentials"
                key: "secret-key"
            RETENTION_DAYS:
              configMapKeyRef:
                name: "backup-config"
                key: "retention"
            POD_NAME:
              fieldRef:
                fieldPath: "metadata.name"
            MEMORY_LIMIT:
              resourceFieldRef:
                containerName: "backup-job"
                resource: "limits.memory"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: PLAIN_VALUE
            value: "simple-string"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: NUMERIC_VALUE
            value: "12345"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: BACKUP_BUCKET
            value: "s3://my-backups"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: S3_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: "s3-credentials"
                key: "secret-key"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: RETENTION_DAYS
            valueFrom:
              configMapKeyRef:
                name: "backup-config"
                key: "retention"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: "metadata.name"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: MEMORY_LIMIT
            valueFrom:
              resourceFieldRef:
                containerName: "backup-job"
                resource: "limits.memory"

  - it: should combine env with both configMapName and secretName
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          env:
            CUSTOM_VAR: "custom-value"
            OVERRIDE_VALUE: "override"
          configMapName: "backup-config"
          secretName: "backup-secrets"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: CUSTOM_VAR
            value: "custom-value"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].env
          content:
            name: OVERRIDE_VALUE
            value: "override"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: "backup-config"
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: "backup-secrets"

  - it: should handle empty env object
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          env: {}
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - exists:
          path: spec.jobTemplate.spec.template.spec.containers[0].env

  - it: should set custom resources
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          resources:
            requests:
              cpu: "200m"
              memory: "128Mi"
            limits:
              cpu: "1000m"
              memory: "512Mi"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].resources.requests.cpu
          value: "200m"
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].resources.requests.memory
          value: "128Mi"
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].resources.limits.cpu
          value: "1000m"
      - equal:
          path: spec.jobTemplate.spec.template.spec.containers[0].resources.limits.memory
          value: "512Mi"

  - it: should create multiple cronjobs
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
        - name: cleanup-job
          schedule: "0 3 * * *"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/cleanup"
            tag: "2.0.0"
    asserts:
      - hasDocuments:
          count: 2

  - it: should not create cronjob when cronjobs is empty
    set:
      environment.name: "dev"
      cronjobs: []
    asserts:
      - hasDocuments:
          count: 0

  - it: should include standard labels
    set:
      environment.name: "dev"
      global.appStack: "myapp"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - exists:
          path: metadata.labels["app.kubernetes.io/name"]
      - exists:
          path: metadata.labels["app.kubernetes.io/instance"]

  - it: should set configMapName when specified
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          configMapName: "backup-config"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].envFrom
          content:
            configMapRef:
              name: "backup-config"

  - it: should set secretName when specified
    set:
      environment.name: "dev"
      cronjobs:
        - name: backup-job
          schedule: "0 2 * * *"
          secretName: "backup-secrets"
          image:
            registry: "myregistry.example.com"
            repository: "mycarrier/backup"
            tag: "1.0.0"
    asserts:
      - isKind:
          of: CronJob
      - contains:
          path: spec.jobTemplate.spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: "backup-secrets"
