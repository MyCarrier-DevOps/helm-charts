suite: VirtualService template tests
templates:
  - virtualService.yaml
tests:
  - it: should create virtual service for istio ingress type
    set:
      environment.name: "dev"
      applications.test-app-api.deploymentType: deployment
      applications.test-app-api.isFrontend: false
      applications.test-app-api.image.registry: "myregistry.example.com"
      applications.test-app-api.image.repository: "mycarrier/test-app-api"
      applications.test-app-api.image.tag: "1.0.0"
      applications.test-app-api.ports.http: 8080
      applications.test-app-api.ports.metrics: 9090
      applications.test-app-api.networking.ingress.type: "istio"
      applications.test-app-api.networking.istio.enabled: true
      applications.test-app-api.networking.istio.responseHeaders.X-Frame-Options: "DENY"
    asserts:
      - isKind:
          of: VirtualService
      - equal:
          path: metadata.name
          value: app-test-app-api
      - equal:
          path: metadata.namespace
          value: dev
      - contains:
          path: spec.hosts
          content: app-test-app-api.dev.mycarrier.dev
      - contains:
          path: spec.gateways
          content: istio-system/default
      - equal:
          path: spec.http[0].name
          value: app-test-app-api

  - it: should add custom hosts and routes when specified
    set:
      environment.name: "dev"
      applications.test-app-api.deploymentType: deployment
      applications.test-app-api.isFrontend: false
      applications.test-app-api.staticHostname: "api.custom.domain"
      applications.test-app-api.image.registry: "myregistry.example.com"
      applications.test-app-api.image.repository: "mycarrier/test-app-api"
      applications.test-app-api.image.tag: "1.0.0"
      applications.test-app-api.ports.http: 8080
      applications.test-app-api.networking.ingress.type: "istio"
      applications.test-app-api.networking.istio.enabled: true
      applications.test-app-api.networking.istio.hosts[0]: "custom-host.example.com"
      applications.test-app-api.networking.istio.routes.external.prefix: "/external"
      applications.test-app-api.networking.istio.routes.external.destination.host: "external-service"
      applications.test-app-api.networking.istio.routes.external.destination.port: 80
    asserts:
      - isKind:
          of: VirtualService
      - contains:
          path: spec.hosts
          content: api.custom.domain.mycarrier.dev
      - equal:
          path: spec.http[1].name
          value: external

  - it: should create feature branch specific virtual service
    set:
      environment.name: "feature-test"
      applications.test-app-api.deploymentType: deployment
      applications.test-app-api.isFrontend: false
      applications.test-app-api.image.registry: "myregistry.example.com"
      applications.test-app-api.image.repository: "mycarrier/test-app-api"
      applications.test-app-api.image.tag: "1.0.0"
      applications.test-app-api.ports.http: 8080
    asserts:
      - matchRegex:
          path: metadata.name
          pattern: .*feature-test
      - matchRegex:
          path: metadata.name
          pattern: .*feature-test.*

  - it: should not render virtual service when istio is explicitly disabled
    set:
      environment.name: "dev"
      applications.disabled-app.deploymentType: deployment
      applications.disabled-app.isFrontend: false
      applications.disabled-app.image.registry: "myregistry.example.com"
      applications.disabled-app.image.repository: "mycarrier/disabled-app"
      applications.disabled-app.image.tag: "1.0.0"
      applications.disabled-app.ports.http: 8080
      applications.disabled-app.networking.ingress.type: "istio"
      applications.disabled-app.networking.istio.enabled: false
    asserts:
      - hasDocuments:
          count: 0

  - it: should render virtual service when istio is explicitly enabled
    set:
      environment.name: "dev"
      applications.enabled-app.deploymentType: deployment
      applications.enabled-app.isFrontend: false
      applications.enabled-app.image.registry: "myregistry.example.com"
      applications.enabled-app.image.repository: "mycarrier/enabled-app"
      applications.enabled-app.image.tag: "1.0.0"
      applications.enabled-app.ports.http: 8080
      applications.enabled-app.networking.ingress.type: "istio"
      applications.enabled-app.networking.istio.enabled: true
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: VirtualService

  - it: should render virtual service when istio enabled is omitted
    set:
      environment.name: "dev"
      applications.implicit-app.deploymentType: deployment
      applications.implicit-app.isFrontend: false
      applications.implicit-app.image.registry: "myregistry.example.com"
      applications.implicit-app.image.repository: "mycarrier/implicit-app"
      applications.implicit-app.image.tag: "1.0.0"
      applications.implicit-app.ports.http: 8080
      applications.implicit-app.networking.ingress.type: "istio"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: VirtualService