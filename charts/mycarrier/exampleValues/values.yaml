
global:
  appStack: myAppStack
  language: csharp
  forceAutoscaling: false
  gitbranch: integration
  branchlabel: integration

environment:
  name: dev
  dependencyenv: 
  domainOverride:
    enabled: false
    staticHostname:
    domain:

application:
  isFrontend: false
  migratingToRollouts: false
  labels: {}
  annotations: {}
  autoscaling:
    enabled: true
  deploymentType: deployment
  env:
    example-key: example-value
  image:
    registry: mycarrieracr.azurecr.io
    repository: myApp
    tag: v0.0.1
  securityContext:
    readOnlyRootFilesystem:
  initContainers: {}
  name: asrgwegr
  ports:
    http: 8080
  probes:
    control:
      readinessOn: false
      livenessOn: true
      startupOn: true
    readinessProbe:
    livenessProbe: {}
    startupProbe: {}
  pullPolicy: Always
  replicas: 1
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 256Mi
  version:
  volumes: []
    # - name: cache
    #   kind: emptyDir
    #   mountPath: /home/node/.cache
    #   subPath: thefile.json
  updateStrategy: {}
    ## If deploymentType == rollout
    ## Canary deployment configuration
    # canary:
    #   backgroundanalysis:
    #     templates:
    #     - templateName: apitests1
    #   steps:
    #   - setWeight: 25
    #   - analysis:
    #       templates:
    #       - templateName: apitests2
    #   - setWeight: 25
    #   - pause: true
    #   - analysis:
    #       templates:
    #       - templateName: apitests2
    #   - setWeight: 100
    ## Blue Green deployment configuration
    # bluegreen:
    #   prePromotionAnalysis:
    #     templates:
    #     - templateName: apitests1
    #   postPromotionAnalysis:
    #     templates:
    #     - templateName: apitests2
# If deploymentType == rollout
analysisTemplates: {}
# - name: apitests1
#   provider:
#     job:
#       container:
#         image:
#           registry: mycarrieracr.azurecr.io
#           repository: app/myappstack/apitest
#           tag: 0.0.1
#         args:
#           - "--filter"
#           - "$(TESTCATEGORY)"
#         env:
#         - name: SECRETID
#           value: "vault:QA/data/app_auth#SecretId"
#         - name: ENVIRONMENT
#           value: "dev"
#         - name: TESTCATEGORY
#           value: "CoreAPITests"
# - name: healthcheck
#   provider:
#     web:
#       successCondition: result == "Healthy"
#       statusEndpoint: health
#       url: "http://myappstack-api-preview.dev-myappstack.svc.cluster.local:8080"
#       jsonPath: "{$.status}"
# - name: prom
#   provider:
#     prometheus:
#       address: http://prometheus.example.com:9090
#       # timeout is expressed in seconds
#       timeout: 40
#       headers:
#       - key: X-Scope-OrgID
#         value: tenant_a
#       query: |
#         sum(irate(
#           istio_requests_total{reporter="source",destination_service=~"{{args.service-name}}",response_code!~"5.*"}[5m]
#         )) /
#         sum(irate(
#           istio_requests_total{reporter="source",destination_service=~"{{args.service-name}}"}[5m]
#         ))
  
serviceAccount:
  create: true

serviceMonitor:
  enabled: false

service:
  annotations: {}
  ports: []
#     - name: http
#       port: 80
#       protocol: TCP
#       targetPort: 8080
# ## this will assume that the port and targetPort are the same and that the protocol it TCP
#     - name: healthcheck
#       port: 9090
## optionally add another internal alias for your service
  # aliases:
  #   - another-internal-name
  affinityTimeoutSeconds: "1000"

networking:
  ingress:
    type: istio # istio|krakend
  istio: {}
    # accessLogs: true
    # responseHeaders:
    #   response:
    #     set:
    #       Strict-Transport-Security: "max-age=7884000; includeSubDomains; preload"
    #       Content-Security-Policy: "default-src 'none'; require-trusted-types-for 'script';"
    #     remove:
    #       - Access-Control-Allow-Origin
    # hosts: []
    # redirects: {}
    # routes:
    #   addonRouteExample:
    #     match:
    #     - uri:
    #         prefix: "/example1"
  krakend: {}

offloads: []


disableOtelAutoinstrumentation: true

secrets:
  individual: []
    # - envVarName: fakesecret 
    # - envVarName: anotherfakesecret
    #   path: secrets/dev/shared/thesecret
    #   keyName: mykey
  
  # create and mount these secrets as a volume
  mounted:
    # - name: postgres-ca
    #   mountedFileName: postgres-ca.pem
    #   vault:
    #     path: shared/ms-postgres-ssl
    #     property: ca.pem
    #   mount:
    #     path: /usr/app/certs/
    #     subPath:
    # - name: another-secret
    #   mountedFileName: payload.json
    #   vault:
    #     path: /path/to/secret
    #     property: propertyname
    #   mount:
    #     path: /home/node/.cache
    #     subPath:
  bulk:
    path: # secrets/dev/shared/thesecret

# serviceMonitor:
#   enabled: true

extraObjects:
  # - |
  #   apiVersion: networking.istio.io/v1alpha3
  #   kind: EnvoyFilter
  #   metadata:
  #     name: connect-proxy-feature13
  #     namespace: dev-curant
  #   spec:
  #     configPatches:
  #     - applyTo: HTTP_ROUTE
  #       match:
  #         context: SIDECAR_OUTBOUND
  #         routeConfiguration:
  #           portNumber: 8080
  #           vhost:
  #             name: "allow_any"
  #       patch:
  #         operation: MERGE
  #         value:
  #           name: "proxy-connect"
  #           match:
  #             connect_matcher: {}
  #           route:
  #             upgrade_configs:
  #             - upgrade_type: CONNECT
  #               connect_config: {}
  # - |
  #   apiVersion: networking.istio.io/v1alpha3
  #   kind: ServiceEntry
  #   metadata:
  #     name: vgs-feature13
  #     namespace: dev-curant
  #   spec:
  #     hosts:
  #     - tntwjjyspo0.sandbox.verygoodproxy.com
  #     ports:
  #     - number: 8080
  #       name: tcp-port
  #       protocol: TCP
  #     resolution: DNS
  #     location: MESH_EXTERNAL    
