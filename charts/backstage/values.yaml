# Default values for backstage.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
 
frontend:
  enabled: false
  replicaCount: 1
  image:
    repository: martinaif/backstage-k8s-demo-frontend
    tag: test1
    pullPolicy: IfNotPresent
  containerPort: 80
  serviceType: ClusterIP
  resources:
    requests:
      memory: 128Mi
    limits:
      memory: 256Mi

backend:
  enabled: true
  nodeEnv: development
  demoData: true
  replicaCount: 1
  image:
    repository: martinaif/backstage-k8s-demo-backend
    tag: 20210423T1550
    pullPolicy: IfNotPresent
  containerPort: 7007
  serviceType: ClusterIP
  postgresCertMountEnabled: true
  resources:
    requests:
      memory: 512Mi
    limits:
      memory: 1024Mi

lighthouse:
  enabled: true
  replicaCount: 1
  image:
    repository: roadiehq/lighthouse-audit-service
    tag: latest
    pullPolicy: IfNotPresent
  containerPort: 3003
  serviceType: ClusterIP
  postgresCertMountEnabled: true
  resources:
    requests:
      memory: 128Mi
    limits:
      memory: 256Mi
  database:
    connection:
      port:
      host:
      user:
      password:
      database: lighthouse_audit_service
    pathToDatabaseCa:

nameOverride: ''
fullnameOverride: ''

ingress:
  enabled: false
  annotations:
    kubernetes.io/ingress.class: nginx

issuer:
  email:
  clusterIssuer: 'letsencrypt-staging'

global:
  postgresql:
    postgresqlUsername: backend-user
    caFilename: ca.crt
  nodeSelector: {}

postgresql:
  enabled: false
  plaintext_pw: false
  external: true
  host: localhost
  user: pguser
  port: 5432
  nameOverride: postgresql
  tls:
    enabled: true
    certificatesSecret: backstage-postgresql-certs
    certFilename: tls.crt
    certKeyFilename: tls.key
  volumePermissions:
    enabled: true
  initdbScriptsSecret: backstage-postgresql-initdb
kubernetes:
  clusterLocatorMethods:
    # - type: 'config'
    #   clusters:
    #     - url: https://my.cluster.com:443
    #       name: Dev
    #       authProvider: 'oidc'
    #       oidcTokenProvider: 'microsoft'
    #       dashboardUrl: https://portal.azure.com/#resource/subscriptions/<SUBSCRIPTION ID>/resourceGroups/<RESOURCE GROUP>/providers/Microsoft.ContainerService/managedClusters/<CLUSTER NAME>/workloads
    #       dashboardApp: 'aks'
appConfig: |
    app:
      title: Scaffolded Backstage App
      baseUrl: http://localhost:3000

    organization:
      name: My Company

    backend:
      # Used for enabling authentication, secret is shared by all backend plugins
      # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
      # information on the format
      # auth:
      #   keys:
      #     - secret: ${BACKEND_SECRET}
      baseUrl: http://localhost:7007
      listen:
        port: 7007
        # Uncomment the following host directive to bind to all IPv4 interfaces and
        # not just the baseUrl hostname.
        # host: 0.0.0.0
      csp:
        connect-src: ["'self'", 'http:', 'https:']
        # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
        # Default Helmet Content-Security-Policy values can be removed by setting the key to false
      cors:
        origin: http://localhost:3000
        methods: [GET, POST, PUT, DELETE]
        credentials: true
      # This is for local developement only, it is not recommended to use this in production
      # The production database configuration is stored in app-config.production.yaml
      database:
        client: better-sqlite3
        connection: ':memory:'
      cache:
        store: memory
      # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

    integrations:
      github:
        - host: github.com
          # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
          # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
          token: ${GITHUB_TOKEN}
        ### Example for how to add your GitHub Enterprise instance using the API:
        # - host: ghe.example.net
        #   apiBaseUrl: https://ghe.example.net/api/v3
        #   token: ${GHE_TOKEN}

    proxy:
      '/test':
        target: 'https://example.com'
        changeOrigin: true

    # Reference documentation http://backstage.io/docs/features/techdocs/configuration
    # Note: After experimenting with basic setup, use CI/CD to generate docs
    # and an external cloud storage when deploying TechDocs for production use-case.
    # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
    techdocs:
      builder: 'local' # Alternatives - 'external'
      generator:
        runIn: 'docker' # Alternatives - 'local'
      publisher:
        type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

    auth:
      # see https://backstage.io/docs/auth/ to learn about auth providers
      providers: {}

    scaffolder:
      # see https://backstage.io/docs/features/software-templates/configuration for software template options

    catalog:
      import:
        entityFilename: catalog-info.yaml
        pullRequestBranchName: backstage-integration
      rules:
        - allow: [Component, System, API, Resource, Location]
      locations:
        # Local example data, file locations are relative to the backend process, typically `packages/backend`
        - type: file
          target: ../../examples/entities.yaml

        # Local example template
        - type: file
          target: ../../examples/template/template.yaml
          rules:
            - allow: [Template]

        # Local example organizational data
        - type: file
          target: ../../examples/org.yaml
          rules:
            - allow: [User, Group]

        ## Uncomment these lines to add more example data
        # - type: url
        #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

        ## Uncomment these lines to add an example org
        # - type: url
        #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
        #   rules:
        #     - allow: [User, Group]

config:
  app:
    baseUrl: https://demo.example.com
    title: Backstage
    googleAnalyticsTrackingId: 
  backend:
    baseUrl: https://demo.example.com
    listen:
      port: 7007
    cors:
      origin: https://demo.example.com
    database:
      client: pg
      connection:
        database: backstage_plugin_catalog
        host:
        user:
        port:
        password:
        ssl:
          rejectUnauthorized: false
          ca:
  sentry:
    organization: example-org-name
  techdocs:
    storageUrl: https://demo.example.com/api/techdocs/static/docs
    requestUrl: https://demo.example.com/api/techdocs
  lighthouse:
    baseUrl: https://demo.example.com/lighthouse-api
  rollbar:
    organization: example-org-name

  # Auth config has recently moved into the app config file in upstream Backstage. However,
  # most of this config simply mandates that items like the client id and client secret should
  # be picked up from the environment variables named below. Those environment variables are
  # set in this helm controlled environment by the 'auth' configuration below this section.
  # Thus, the only key in this config which directly controls an app config is the
  # auth.providers.github.development.appOrigin property.
  auth:
    providers:
      google:
        development:
          appOrigin: 'http://localhost:3000/'
          secure: false
          clientId: ${AUTH_GOOGLE_CLIENT_ID}
          clientSecret: ${AUTH_GOOGLE_CLIENT_SECRET}
      github:
        development:
          appOrigin: 'http://localhost:3000/'
          secure: false
          clientId: ${AUTH_GITHUB_CLIENT_ID}
          clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
          enterpriseInstanceUrl: ${AUTH_GITHUB_ENTERPRISE_INSTANCE_URL}
      gitlab:
        development:
          appOrigin: 'http://localhost:3000/'
          secure: false
          clientId: ${AUTH_GITLAB_CLIENT_ID}
          clientSecret: ${AUTH_GITLAB_CLIENT_SECRET}
          audience: ${GITLAB_BASE_URL}
      okta:
        development:
          appOrigin: 'http://localhost:3000/'
          secure: false
          clientId: ${AUTH_OKTA_CLIENT_ID}
          clientSecret: ${AUTH_OKTA_CLIENT_SECRET}
          audience: ${AUTH_OKTA_AUDIENCE}
      oauth2:
        development:
          appOrigin: 'http://localhost:3000/'
          secure: false
          clientId: ${AUTH_OAUTH2_CLIENT_ID}
          clientSecret: ${AUTH_OAUTH2_CLIENT_SECRET}
          authorizationURL: ${AUTH_OAUTH2_AUTH_URL}
          tokenURL: ${AUTH_OAUTH2_TOKEN_URL}
      auth0:
        development:
          clientId: ${AUTH_AUTH0_CLIENT_ID}
          clientSecret: ${AUTH_AUTH0_CLIENT_SECRET}
          domain: ${AUTH_AUTH0_DOMAIN}
      microsoft:
        development:
          clientId: ${AUTH_MICROSOFT_CLIENT_ID}
          clientSecret: ${AUTH_MICROSOFT_CLIENT_SECRET}
          tenantId: ${AUTH_MICROSOFT_TENANT_ID}
        production:
          clientId: ${AUTH_MICROSOFT_CLIENT_ID}
          clientSecret: ${AUTH_MICROSOFT_CLIENT_SECRET}
          tenantId: ${AUTH_MICROSOFT_TENANT_ID}

auth:
  google:
    clientId: a
    clientSecret: a
  github:
    clientId: c
    clientSecret: c
  gitlab:
    clientId: b
    clientSecret: b
    baseUrl: b
  okta:
    clientId: b
    clientSecret: b
    audience: b
  oauth2:
    clientId: b
    clientSecret: b
    authUrl: b
    tokenUrl: b
  auth0:
    clientId: b
    clientSecret: b
    domain: b
  microsoft:
    clientId: f
    clientSecret: f
    tenantId: f
  azure:
    api:
      token: h
  sentryToken: e
  rollbarAccountToken: f
  # This is a 'Personal Access Token'
  circleciAuthToken: r
  # Used by the scaffolder to create GitHub repos. Must have 'repo' scope.
  githubToken: g
  # use a secret for gitlab tokens
  gitlabTokenSecret: gitlabtoken
  newRelicRestApiKey: r
  travisciAuthToken: fake-travis-ci-auth-token
  pagerdutyToken: h
